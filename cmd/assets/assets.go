// Code generated by "esc -ignore=assets.go -pkg=assets -prefix=assets/ -o assets/assets.go assets/"; DO NOT EDIT.

package assets

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/index.css": {
		local:   "assets/index.css",
		size:    4064,
		modtime: 1538505181,
		compressed: `
H4sIAAAAAAAC/7yX3WrrOBCA7/MUoktpC3Hwvx33Zhd2l73ad5DtcSKiSEZSmmaXvvshlu0mbaIRHDim
LXhG1vdJlkZ1LdsT+X9BCCF7qjZMVCR8HW572rZMbOb7I2vNtiJRGD7awBbYZmsuIzVtdhslD6INGsml
qshvyXC9Lj4Wi5XeBUdF+x7USOylZoZJURFaa8kPBmw/RvYVyaZeOXTm4tZqBjYaRGHYv18lhocv46N4
/BmZzMfQ6MZpDXwys4O3naX59OA4quOWzarwbgLK2UZUpAFhQNl4J4UJOrpn/FSRh3+Av4FhDSX/wgEe
lmQOLMkfilG+JJoKHWhQrLvoQLP/oCJROfFt0Jw4VERItaf8Iv5GFaPC3Mgcx/EW4fguORMQzO8vW6UT
YBiO3tJWHisS9+/zr9rU9DlcEvuzSl7maevoMFMNUw2HcfqmtZJ+m/KL0NWLTObw56JQwKlhb3AHdY7c
pDpW6L0VZyXCi+UXotSqhk6qCd5IYeA8+09PtpeW6Z7TU0VqLpvd6/UWI/Rg5PW+yr5KZ/d31V/DNaal
akEFirbsoCsyr5XgCPWOmYAKtqd2zLP637SFP4HTE4lWsSZMdEwwAwSohoCJQB4MqaXZ2p5+rgdkFuNx
/iZdo6jQnVT7iihpqIHnJGxh8zIOaq+RFveziEiCiuSoSO4Uyf1EUlRkjYqsnSJrP5EMFYli1OSqiSON
uOS4S4a7ZG6XzM+lwF1K3KV0u5R+LiXqEkeoy1UTRxpxWeMuKe6Sul1SP5coxGUKXKZwyxSeMpFHkfOo
ckiZ85TxqLgeJRepuZ5FN74+RL+dWUELwxkaRKtIfzmNvuSw8u5Nus/BKakvJVyt73JsDivO/qTSQSpx
Uu5PKhykAicV/qTcQcpxUulPyhykDCet/Umpg5Rqj5Lnj0ocqMQDFfmjYgcq9kDF/qjIgRo37+/T8zs4
dYruQd/6n9aiwsclSdaPy+H7YYydL9nThpnT/L3wMfxNb7eJpjZn+K+H/ggAAP//8wnFXOAPAAA=
`,
	},

	"/index.html": {
		local:   "assets/index.html",
		size:    1102,
		modtime: 1538505260,
		compressed: `
H4sIAAAAAAAC/5SUX8vTMBSH7/spjrnJ+8K6Ov/OmRZEvRP0wiEiXmTp6RqXpSEnrQ7Zd5euXV1BeUlv
csj5PWng9Kl49O7j289fP72HOhxNkYjrgrIsEgAAccQgQdXSE4actaFK1ywbe6S8dgHIq5y1rnXLH8QK
kQ3bRSKy4Ryxa8pTkQij7QE8mpxROBmkGjEwqD1WOdO2xF9LRcSKRJS6A2UkUc7okP700jn0bHzpvFnJ
Utt9qrRXBsfIP2JDfwVT2d+z1N0DwJNY4Gks8CwWeB4LvIgFXsYC61jgVSywehxNRM969b9h35Zz0Mgd
GlZ8aC4fIbxxzmglg27syFyXqxH9GbqCO07oO63wS+MP6DloC1Z2ei9D4+/h93TRrdu6JQXpw93fzf7h
qrEBbUhbb/gG+KBPby9fzIOSCAPxDXzjk2N8AVy6Xlf+fUqf719f6nNyY/Ct4QMxF3w0O7v8N/4EAAD/
/30ooSFOBAAA
`,
	},

	"/upup.js": {
		local:   "assets/upup.js",
		size:    903,
		modtime: 1534974550,
		compressed: `
H4sIAAAAAAAC/5xTsW7bMBDd8xUUixoiSlPOKkFFO3TokCkJOhgeGPoksWVI4e5ko5D074VkB0mATN3e
kXrv3j0diyITj/1jf7OAEyD5FEUpbs3O7NYzO3CXUIhSPNggvjOg+PZgwwLW++AdRAJRirufD+tJx9xT
WRSt5254Mi49F1dCsXbKmyE69inmoEY5EAhi9I5ldbIouI725FvLCQ0BnryDXwn/AFa+yTNWCDxgFNx5
MotcHYcQNKzcWI/yytmeV9J2wCBLOfRDb+hsnn00v0nOGuvsVlMtmxR5ewbfdlyKpxSOlXApJCzFp92u
qWT12mcktsjlW/PrpT0e74HZx5ZyUJoNQuuJAfO4/8jNQY/kUg+lNIWcleEO4rtIcLNxKVIKYEJqc3l/
0RAXDXGRR7t8LmhwDoiaIYiz505clMVnJ7+AWQtNqsrB+EhsQ/CxnSY2LkXGFALgNIGxjv0JlOkT8R0Q
2Rby0a5+SknAW7rOJ/ULKuOsZmWcZdf9t/nG+gDHq1tNalazfpPma9SsRrnsSGxlXfPfHlKTc83TNM5q
s8m5HpeBIHLJs9J7ea2kfkFr8FpaImCS+qPfoqWzroPt9Q3Ig2kS/rBvx0M18h4PWV3DZpPHPR7qpV59
H+FpaN8tB9ZZbrEdniEymQCx5e7rTk1TlsE8r+GFkC8rpKqbfwEAAP//i59PyocDAAA=
`,
	},

	"/upup.sw.js": {
		local:   "assets/upup.sw.js",
		size:    1529,
		modtime: 1534974557,
		compressed: `
H4sIAAAAAAAC/4xTwY7bNhC971cwPAgkJNHuoRdpia1huE2Apgh2HaRFERgMNbKIyKRKjpwGtv69kFbe
XcvrIjfi8T3MzJs3s9kb8rH52JAH8HujgXxy/iv4mx7fgw/GWZKRn8RczAdMtVg5T0hG1qomCwRPflmr
un8M/7XRYAOQjLx/tx6QCrEJ2Wy2NVi1X4R2u9komPWFb/bKk81ysXy72vyxeL/afLhf/fruT0nbpm1S
rXQFNNloVeu2VghvVahk2VqNxlkG/NDLMbFyngTJQIJA94De2C3jXNRgt1jlpmRzKWXgHrD1lti8dJ6h
nOd4G3KMY24ls7e3P/PUxiB0pfzSFbBAhjyxRznPT8IuD1CXQhXFag8WfzcBwYJndAchqC3Q5GVvNACm
ARCN3QYqpQRRKFRCDYwo2jTKB3gYCQtbLPtx2cg6CXnHkytVS0BdndcE4SE0zhafDFZsILAe+6eFgFxo
1QNPAn4YJxuMDmKnJnyswD7T8YmPxyOjVu3NViE8jjZqxM4VcDzS31brCQ5YuSKKnpEKVAE+iC0go0pr
aJByYayu2wICowj/4qzCXU353VmDNHxLXVnWxkKqnUWwSHm2d6Ygc97xjvOO50OwXnX4MkDyMoExTWnM
4G86VE7HY6Cf7y6hnppRyuPznDIQY3Nxr3l8pq2v6ecYhAoBMPD8fAGugd7mq76fdFGEfR4Wdc1OkNip
hr2c7BRa+EbuHx1nkBz69WTUulQ7H+hgVjJt727MzQS+FE/6fC6Komnx1T0lwDuePVlz9z/MzZfW1MX9
kOcAz3Zynv24iv7lWqI8kJFI+3BM+p6ewVf4Htj14T54tzMBhBrcn9puSgYioPIYhhu8jBaPInwjJfDz
qgXUgMDgMb8d7yajyKvLPRmUHMaTyg50OW5u/b0Bmr24pa7jXX7zXwAAAP//R87g1vkFAAA=
`,
	},

	"/": {
		isDir: true,
		local: "assets",
	},
}
